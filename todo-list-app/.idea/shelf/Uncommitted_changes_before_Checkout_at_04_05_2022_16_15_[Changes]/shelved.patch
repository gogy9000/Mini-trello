Index: src/App.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport './App.css';\r\nimport {ToDos} from \"./Todos\";\r\nimport {AppBar, Grid} from \"@mui/material\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <Grid container>\r\n\r\n            <Grid item>\r\n\r\n            <ToDos />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n
===================================================================
diff --git a/src/App.tsx b/src/App.tsx
--- a/src/App.tsx	
+++ b/src/App.tsx	
@@ -1,20 +1,26 @@
 import React from 'react';
 import './App.css';
 import {ToDos} from "./Todos";
-import {AppBar, Grid} from "@mui/material";
-
+import {AppBar, Container, Grid, Typography} from "@mui/material";
 
 
 function App() {
 
+
     return (
-        <Grid container>
-
-            <Grid item>
-
-            <ToDos />
-            </Grid>
-        </Grid>
+
+        <div>
+            <AppBar>Todo</AppBar>
+            <Typography mt={4}>
+                <Container fixed  >
+                    <Grid container   >
+                        <ToDos/>
+                    </Grid>
+                </Container>
+            </Typography>
+
+        </div>
+
     );
 }
 
Index: src/TaskBlock.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState} from \"react\";\r\nimport {Task1Type, TaskBlockType} from \"./Types\";\r\n\r\nimport {deleteTaskAC, updateTaskAC} from \"./Redux/ToDoReducer\";\r\nimport {CustomInput} from \"./CustomInput\";\r\nimport {CustomButton} from \"./CustomButton\";\r\nimport {CustomEditSpan} from \"./CustomEditSpan\";\r\n\r\n\r\nexport const TaskBlock = (props: TaskBlockType) => {\r\n    const [taskValue, setTaskValue] = useState<string>('')\r\n\r\n\r\n    const updateTask = (idTask: string, idTitle: string) => {\r\n\r\n        props.dispatch(updateTaskAC(idTitle, idTask, taskValue))\r\n\r\n    }\r\n\r\n\r\n    const checkTask = (id: string, idTitle: string) => {\r\n        props.callBack(id, idTitle)\r\n    }\r\n\r\n    const deleteTask = (id: string, idTitle: string) => {\r\n        props.dispatch(deleteTaskAC(id, idTitle))\r\n    }\r\n\r\n    const mapTasks = props.tasks.map((taskElem: Task1Type) => {\r\n\r\n\r\n\r\n            return (\r\n                <li key={taskElem.id}>\r\n\r\n                    <input type='checkbox'\r\n                           defaultChecked={taskElem.isDone}\r\n                           onClick={() => {\r\n                               checkTask(taskElem.id, props.idTitle)\r\n                           }}\r\n                    />\r\n\r\n                    <CustomEditSpan value={taskValue}\r\n                                    onBlur={() => {\r\n                                        updateTask(taskElem.id, props.idTitle)\r\n                                        setTaskValue('')\r\n                                    }}\r\n                                    onChangeText={(text) => {\r\n                                        setTaskValue(text)\r\n                                    }}\r\n                                    spanProps={{children:!taskElem.title? undefined : taskElem.title}}/>\r\n                    <CustomButton onClick={() => {\r\n                        deleteTask(taskElem.id, props.idTitle)\r\n                    }}>\r\n                        remove task\r\n                    </CustomButton>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {mapTasks}\r\n                </ul>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n
===================================================================
diff --git a/src/TaskBlock.tsx b/src/TaskBlock.tsx
--- a/src/TaskBlock.tsx	
+++ b/src/TaskBlock.tsx	
@@ -5,6 +5,8 @@
 import {CustomInput} from "./CustomInput";
 import {CustomButton} from "./CustomButton";
 import {CustomEditSpan} from "./CustomEditSpan";
+import {Button, Checkbox, IconButton} from "@mui/material";
+import {Check, Clear, Create} from "@mui/icons-material";
 
 
 export const TaskBlock = (props: TaskBlockType) => {
@@ -31,15 +33,22 @@
 
 
             return (
-                <li key={taskElem.id}>
+                <div key={taskElem.id}>
 
-                    <input type='checkbox'
-                           defaultChecked={taskElem.isDone}
-                           onClick={() => {
-                               checkTask(taskElem.id, props.idTitle)
-                           }}
+                    {/*<input type='checkbox'*/}
+                    {/*       defaultChecked={taskElem.isDone}*/}
+                    {/*       onClick={() => {*/}
+                    {/*           checkTask(taskElem.id, props.idTitle)*/}
+                    {/*       }}*/}
+                    {/*/>*/}
+                    <Checkbox
+                        checked= {taskElem.isDone}
+                        icon={<Check />}
+                        checkedIcon={<Check />}
+                        onClick={() => {
+                            checkTask(taskElem.id, props.idTitle)
+                        }}
                     />
-
                     <CustomEditSpan value={taskValue}
                                     onBlur={() => {
                                         updateTask(taskElem.id, props.idTitle)
@@ -49,21 +58,21 @@
                                         setTaskValue(text)
                                     }}
                                     spanProps={{children:!taskElem.title? undefined : taskElem.title}}/>
-                    <CustomButton onClick={() => {
+
+                    <IconButton onClick={() => {
                         deleteTask(taskElem.id, props.idTitle)
-                    }}>
-                        remove task
-                    </CustomButton>
-                </li>
+                    } }><Clear/></IconButton>
+
+                </div>
             )
         }
     )
 
         return (
             <div>
-                <ul>
+                <div>
                     {mapTasks}
-                </ul>
+                </div>
 
 
             </div>
Index: src/InputBlock.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {InputPropsType} from \"./Types\";\r\nimport {addTaskAC} from \"./Redux/ToDoReducer\";\r\nimport {CustomButton} from \"./CustomButton\";\r\n\r\n\r\nexport const InputBlock = (props: InputPropsType) => {\r\n\r\n    const [inputText, setInputText]= useState<string>('')\r\n    const [errorInput, setErrorInput]=useState<boolean>(false)\r\n\r\n    const addTask = () => {\r\n        if ((/^\\s+$/).test(inputText) || inputText === '') {\r\n            setErrorInput(true)\r\n            return\r\n        }\r\n      props.dispatch(addTaskAC(props.idTitle,inputText))\r\n        setInputText('')\r\n    }\r\n\r\n    const ChangeTextTaskTitle = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputText(e.currentTarget.value)\r\n    }\r\n\r\n    const onclickHandler = () => {\r\n        setInputText('')\r\n        setErrorInput(false)\r\n    }\r\n\r\n    return (\r\n        <div className={errorInput?'error':'notError'}>\r\n            <input onChange={ChangeTextTaskTitle} value={inputText}\r\n            onClick={onclickHandler}/>\r\n            <CustomButton onClick={addTask}>add</CustomButton>\r\n\r\n            {errorInput&&<div >field is empty</div>}\r\n        </div>\r\n    )\r\n}
===================================================================
diff --git a/src/InputBlock.tsx b/src/InputBlock.tsx
--- a/src/InputBlock.tsx	
+++ b/src/InputBlock.tsx	
@@ -3,6 +3,9 @@
 import {InputPropsType} from "./Types";
 import {addTaskAC} from "./Redux/ToDoReducer";
 import {CustomButton} from "./CustomButton";
+import {Button, TextField} from "@mui/material";
+import {Simulate} from "react-dom/test-utils";
+
 
 
 export const InputBlock = (props: InputPropsType) => {
@@ -30,11 +33,23 @@
 
     return (
         <div className={errorInput?'error':'notError'}>
-            <input onChange={ChangeTextTaskTitle} value={inputText}
-            onClick={onclickHandler}/>
-            <CustomButton onClick={addTask}>add</CustomButton>
+            <TextField
+                size={'small'}
+                onChange={ChangeTextTaskTitle}
+                onClick={onclickHandler}
+                value={inputText}
+                error={errorInput}
+                id="filled-error-helper-text"
+                label={errorInput?"field is empty.":'New task'}
+                helperText={errorInput?"field is empty.":""}
+                variant="filled"
+            />
+            {/*<input onChange={ChangeTextTaskTitle} value={inputText}*/}
+            {/*onClick={onclickHandler}/>*/}
+            <Button onClick={addTask} variant={'outlined'}>add</Button>
+            {/*<CustomButton onClick={addTask}>add</CustomButton>*/}
 
-            {errorInput&&<div >field is empty</div>}
+            {/*{errorInput&&<div >field is empty</div>}*/}
         </div>
     )
 }
\ No newline at end of file
Index: src/Todos.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {taskTitle} from \"./Types\";\r\nimport {ToDo} from \"./ToDo\";\r\nimport {createNewTodoAC} from \"./Redux/ToDoReducer\";\r\nimport {CustomEditSpan} from \"./CustomEditSpan\";\r\nimport {CustomButton} from \"./CustomButton\";\r\nimport { Button } from \"@mui/material\";\r\n// import {Button} from \"@mui/material\";\r\n\r\n\r\nexport const ToDos = () => {\r\n\r\n    let state = useSelector((state: any) => state.stateTaskBlock)\r\n    let dispatch = useDispatch()\r\n    let [todoName, setTodoName] = useState<string>('')\r\n    const [createMode, setCreateMode] = useState<boolean>(false)\r\n\r\n    const createTask = () => {\r\n        if (!todoName && createMode) {\r\n            return\r\n        }\r\n        dispatch(createNewTodoAC(todoName ? todoName : 'no name task'))\r\n        setTodoName('')\r\n        setCreateMode(false)\r\n\r\n\r\n    }\r\n    const onDoubleClickHandler = () => setTodoName('')\r\n\r\n\r\n    const moveCreateTask = () => {\r\n        setTodoName('')\r\n        setCreateMode(true)\r\n    }\r\n\r\n\r\n    const todos = state.tasksTitle.map((task: taskTitle, index: number, arr: Array<taskTitle>) => <ToDo\r\n        lastItem={arr.length - index} createMode={createMode} key={task.id} task={task} state={state}/>)\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <CustomEditSpan value={todoName} onChangeText={setTodoName}\r\n                            className={'new-todo-input'}\r\n                            onBlur={() => {\r\n                                setTodoName('')\r\n                            }}\r\n                            onDoubleClick={onDoubleClickHandler}\r\n                            spanProps={{children: todoName ? undefined : ' Create new task'}}/>\r\n\r\n            {/*<CustomButton onMouseUp={moveCreateTask}*/}\r\n            {/*              onMouseDown={createTask}*/}\r\n            {/*>Create</CustomButton>*/}\r\n            <Button variant=\"contained\" onMouseUp={moveCreateTask}\r\n                    onMouseDown={createTask}\r\n            >Create</Button>\r\n\r\n            <div>{todos}</div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n
===================================================================
diff --git a/src/Todos.tsx b/src/Todos.tsx
--- a/src/Todos.tsx	
+++ b/src/Todos.tsx	
@@ -6,8 +6,8 @@
 import {createNewTodoAC} from "./Redux/ToDoReducer";
 import {CustomEditSpan} from "./CustomEditSpan";
 import {CustomButton} from "./CustomButton";
-import { Button } from "@mui/material";
-// import {Button} from "@mui/material";
+import {Button, Grid, TextField} from "@mui/material";
+
 
 
 export const ToDos = () => {
@@ -41,27 +41,35 @@
 
 
     return (
-        <div className="App">
-
-            <CustomEditSpan value={todoName} onChangeText={setTodoName}
-                            className={'new-todo-input'}
-                            onBlur={() => {
-                                setTodoName('')
-                            }}
-                            onDoubleClick={onDoubleClickHandler}
-                            spanProps={{children: todoName ? undefined : ' Create new task'}}/>
+            <div>
+            <TextField  id="outlined-basic" label="Create new todo" variant="standard"
+                       value={todoName}
+                       onBlur={() => {
+                           setTodoName('')
+                       }}
+                       onChange={(e)=> {
+                           setTodoName(e.currentTarget.value)
+                       }} />
+
+            {/*<CustomEditSpan value={todoName} onChangeText={setTodoName}*/}
+            {/*                className={'new-todo-input'}*/}
+            {/*                onBlur={() => {*/}
+            {/*                    setTodoName('')*/}
+            {/*                }}*/}
+            {/*                onDoubleClick={onDoubleClickHandler}*/}
+            {/*                spanProps={{children: todoName ? undefined : ' Create new task'}}/>*/}
 
             {/*<CustomButton onMouseUp={moveCreateTask}*/}
             {/*              onMouseDown={createTask}*/}
             {/*>Create</CustomButton>*/}
-            <Button variant="contained" onMouseUp={moveCreateTask}
+            <Button variant="outlined" onMouseUp={moveCreateTask}
                     onMouseDown={createTask}
             >Create</Button>
 
-            <div>{todos}</div>
+            <div >{todos}</div>
 
-
-        </div>
+            </div>
+
     )
 }
 
Index: src/ToDo.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {StateType, taskTitle} from \"./Types\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {checkTaskAC, removeTodoAC, updateTodoNameAC} from \"./Redux/ToDoReducer\";\r\nimport {InputBlock} from \"./InputBlock\";\r\nimport {TaskBlock} from \"./TaskBlock\";\r\nimport {ButtonsBlock} from \"./ButtonsBlock\";\r\nimport {CustomInput} from \"./CustomInput\";\r\nimport {CustomButton} from \"./CustomButton\";\r\n\r\ntype ToDoType = {\r\n    task: taskTitle\r\n    state: StateType\r\n    createMode: boolean\r\n    lastItem: number\r\n}\r\nexport const ToDo: React.FC<ToDoType> = ({task, state, createMode, lastItem}) => {\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const onCheckHandler = (id: string, idTitle: string) => dispatch(checkTaskAC(id, idTitle))\r\n\r\n    const [filter, setFilter] = useState<string>('All')\r\n    const [updateTodoMode, setUpdateTodoMode] = useState<boolean>(false)\r\n    const [todoName, setTodoName] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const todoNameChanger = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setTodoName(e.currentTarget.value)\r\n    }\r\n\r\n    const useSetFilterHandler = (filter: string) => setFilter(filter)\r\n\r\n    const onUpdateTodoMode = () => setUpdateTodoMode(true)\r\n\r\n    const updateTodoName = () => {\r\n\r\n        dispatch(updateTodoNameAC(todoName ? todoName : 'no name', task.id))\r\n        setUpdateTodoMode(false)\r\n    }\r\n\r\n    const removeTodo = () => {\r\n        dispatch(removeTodoAC(task.id))\r\n    }\r\n    console.log(lastItem)\r\n    return (\r\n        <div key={task.id} className={lastItem === 1 && !createMode ? 'todo-mapped-created' : 'todo-mapped'}>\r\n            {\r\n                !updateTodoMode\r\n                    ? <h3 onClick={onUpdateTodoMode}>{task.titleName}</h3>\r\n                    : <CustomInput onChange={todoNameChanger} onEnter={updateTodoName}\r\n                                   value={todoName} error={error}/>\r\n\r\n            }\r\n\r\n\r\n            <InputBlock dispatch={dispatch} state={state} idTitle={task.id}/>\r\n\r\n            {\r\n                state.taskBody[task.id].activeTasks.length === 0\r\n                && state.taskBody[task.id].completedTasks.length === 0\r\n                && <div>no active and completed tasks</div>\r\n            }\r\n\r\n            <div>\r\n                {\r\n                    filter === 'Completed' || 'All'\r\n                    && <TaskBlock idTitle={task.id} tasks={state.taskBody[task.id].activeTasks}\r\n                                  callBack={onCheckHandler} dispatch={dispatch}/>\r\n                }\r\n            </div>\r\n\r\n            <div className={'CompletedTasks'}>\r\n                {\r\n                    filter === 'Active' || 'All'\r\n                    && <TaskBlock idTitle={task.id} tasks={state.taskBody[task.id].completedTasks}\r\n                                  callBack={onCheckHandler} dispatch={dispatch}/>\r\n                }\r\n            </div>\r\n            <div>\r\n                <CustomButton className={filter === 'All' ? 'activeButton' : ''}\r\n                              onClick={() => {\r\n                                  setFilter('all')\r\n                              }}>all </CustomButton>\r\n\r\n                <CustomButton className={filter === 'Active' ? 'activeButton' : ''}\r\n                              onClick={() => {\r\n                                  setFilter('Active')\r\n                              }}>Active </CustomButton>\r\n\r\n                <CustomButton className={filter === 'Completed' ? 'activeButton' : ''}\r\n                              onClick={() => {\r\n                                  setFilter('Completed')\r\n                              }}>Completed </CustomButton>\r\n\r\n                <CustomButton onClick={() => {\r\n                    removeTodo()\r\n                }}>remove todo </CustomButton>\r\n            </div>\r\n            <ButtonsBlock filterHandler={useSetFilterHandler} filter={filter}/>\r\n\r\n        </div>)\r\n}\r\n\r\n
===================================================================
diff --git a/src/ToDo.tsx b/src/ToDo.tsx
--- a/src/ToDo.tsx	
+++ b/src/ToDo.tsx	
@@ -7,6 +7,7 @@
 import {ButtonsBlock} from "./ButtonsBlock";
 import {CustomInput} from "./CustomInput";
 import {CustomButton} from "./CustomButton";
+import {Button, TextField} from "@mui/material";
 
 type ToDoType = {
     task: taskTitle
@@ -17,7 +18,6 @@
 export const ToDo: React.FC<ToDoType> = ({task, state, createMode, lastItem}) => {
 
     let dispatch = useDispatch()
-
     const onCheckHandler = (id: string, idTitle: string) => dispatch(checkTaskAC(id, idTitle))
 
     const [filter, setFilter] = useState<string>('All')
@@ -25,10 +25,8 @@
     const [todoName, setTodoName] = useState<string>('')
     const [error, setError] = useState<string>('')
 
-    const todoNameChanger = (e: ChangeEvent<HTMLInputElement>) => {
+    const todoNameChanger = (e: ChangeEvent<HTMLInputElement>) =>setTodoName(e.currentTarget.value)
 
-        setTodoName(e.currentTarget.value)
-    }
 
     const useSetFilterHandler = (filter: string) => setFilter(filter)
 
@@ -36,21 +34,35 @@
 
     const updateTodoName = () => {
 
-        dispatch(updateTodoNameAC(todoName ? todoName : 'no name', task.id))
+        dispatch(updateTodoNameAC(todoName ? todoName : 'unnamed task', task.id))
         setUpdateTodoMode(false)
     }
 
     const removeTodo = () => {
         dispatch(removeTodoAC(task.id))
     }
-    console.log(lastItem)
+
     return (
         <div key={task.id} className={lastItem === 1 && !createMode ? 'todo-mapped-created' : 'todo-mapped'}>
             {
                 !updateTodoMode
-                    ? <h3 onClick={onUpdateTodoMode}>{task.titleName}</h3>
-                    : <CustomInput onChange={todoNameChanger} onEnter={updateTodoName}
-                                   value={todoName} error={error}/>
+                    ? <div onClick={onUpdateTodoMode}>{task.titleName}</div>
+                    :<div>
+                    <TextField
+                        size={'small'}
+                        onClick={()=>{setError('')}}
+                        onChange={todoNameChanger}
+                        value={todoName}
+                        error={error?true:false}
+                        id="filled-error-helper-text"
+                        label={'New task name'}
+                        // helperText={updateTodoMode?"Press Enter.":'New task name'}
+                        variant="filled"
+                    />
+                     <Button variant={'outlined'} onClick={updateTodoName} size={'small'} >update</Button>
+                    </div>
+                // <CustomInput onChange={todoNameChanger} onEnter={updateTodoName}
+                    //                value={todoName} error={error}/>
 
             }
 
@@ -79,26 +91,26 @@
                 }
             </div>
             <div>
-                <CustomButton className={filter === 'All' ? 'activeButton' : ''}
+                <Button color={filter === 'All' ? 'secondary' : 'primary'}
                               onClick={() => {
                                   setFilter('all')
-                              }}>all </CustomButton>
+                              }}>all </Button>
 
-                <CustomButton className={filter === 'Active' ? 'activeButton' : ''}
+                <Button color={filter === 'Active' ? 'secondary' : 'primary'}
                               onClick={() => {
                                   setFilter('Active')
-                              }}>Active </CustomButton>
+                              }}>Active </Button>
 
-                <CustomButton className={filter === 'Completed' ? 'activeButton' : ''}
+                <Button color={filter === 'Completed' ? 'secondary' : 'primary'}
                               onClick={() => {
                                   setFilter('Completed')
-                              }}>Completed </CustomButton>
+                              }}>Completed </Button>
 
-                <CustomButton onClick={() => {
+                <Button color={'success'} onClick={() => {
                     removeTodo()
-                }}>remove todo </CustomButton>
+                }}>remove todo </Button>
             </div>
-            <ButtonsBlock filterHandler={useSetFilterHandler} filter={filter}/>
+            {/*<ButtonsBlock filterHandler={useSetFilterHandler} filter={filter}/>*/}
 
         </div>)
 }
Index: src/CustomEditSpan.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {DetailedHTMLProps, HTMLAttributes, InputHTMLAttributes, useState} from \"react\";\r\nimport {CustomInput} from \"./CustomInput\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\r\ntype CustomEditSpanPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    spanProps?: DefaultSpanPropsType\r\n}\r\nexport const CustomEditSpan: React.FC<CustomEditSpanPropsType> = (\r\n    {\r\n        autoFocus, onBlur, onEnter,\r\n        spanProps,onChangeText, ...restProps\r\n    }) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}\r\n\r\n    const onEnterCallBack = () => {\r\n        setEditMode(false)\r\n        onEnter && onEnter()\r\n    }\r\n\r\n    const onBlurCallBack = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setEditMode(false)\r\n\r\n        onBlur && onBlur(e)\r\n    }\r\n\r\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        setEditMode(true)\r\n        onDoubleClick && onDoubleClick(e)\r\n    }\r\n    const finalClassName = `${className}`\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                    ? <CustomInput\r\n\r\n                        autoFocus\r\n                        onBlur={onBlurCallBack}\r\n                        onEnter={onEnterCallBack}\r\n                        onChangeText={onChangeText}\r\n                        {...restProps}/>\r\n\r\n                    : <span onDoubleClick={onDoubleClickCallBack}\r\n                            className={finalClassName}\r\n                            {...restSpanProps}>\r\n                        {  children|| restProps.value}\r\n                    </span>\r\n\r\n            }\r\n        </>\r\n    )\r\n}
===================================================================
diff --git a/src/CustomEditSpan.tsx b/src/CustomEditSpan.tsx
--- a/src/CustomEditSpan.tsx	
+++ b/src/CustomEditSpan.tsx	
@@ -1,5 +1,7 @@
 import React, {DetailedHTMLProps, HTMLAttributes, InputHTMLAttributes, useState} from "react";
 import {CustomInput} from "./CustomInput";
+import {Create} from "@mui/icons-material";
+import {IconButton} from "@mui/material";
 
 type DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>
 type DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>
@@ -9,10 +11,11 @@
     error?: string
     spanClassName?: string
     spanProps?: DefaultSpanPropsType
+    onClick?:()=>void
 }
 export const CustomEditSpan: React.FC<CustomEditSpanPropsType> = (
     {
-        autoFocus, onBlur, onEnter,
+        autoFocus, onBlur, onEnter, onClick,
         spanProps,onChangeText, ...restProps
     }) => {
 
@@ -33,6 +36,11 @@
     const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {
         setEditMode(true)
         onDoubleClick && onDoubleClick(e)
+
+    }
+    const onClickCallback = () => {
+        setEditMode(true)
+        onClick && onClick()
     }
     const finalClassName = `${className}`
 
@@ -40,19 +48,19 @@
         <>
             {
                 editMode
-                    ? <CustomInput
-
+                    ? <span>
+                    <CustomInput
                         autoFocus
                         onBlur={onBlurCallBack}
                         onEnter={onEnterCallBack}
                         onChangeText={onChangeText}
                         {...restProps}/>
-
+                    <IconButton onClick={onClickCallback}><Create color={'secondary'}/></IconButton>
+                    </span>
                     : <span onDoubleClick={onDoubleClickCallBack}
                             className={finalClassName}
                             {...restSpanProps}>
-                        {  children|| restProps.value}
-                    </span>
+                        {  children|| restProps.value} <IconButton onClick={onClickCallback}><Create/></IconButton></span>
 
             }
         </>
