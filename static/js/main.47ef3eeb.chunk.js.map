{"version":3,"sources":["Redux/ToDoReducer.ts","CustomButton.tsx","InputBlock.tsx","CustomInput.tsx","CustomEditSpan.tsx","TaskBlock.tsx","ButtonsBlock.tsx","ToDo.tsx","Todos.tsx","App.tsx","serviceWorker.ts","index.tsx","Redux/ReduxStore.ts"],"names":["initialState","tasksTitle","taskBody","CustomButton","className","red","restProps","finalClassName","InputBlock","props","useState","inputText","setInputText","errorInput","setErrorInput","onChange","e","currentTarget","value","onClick","test","dispatch","idTitle","type","addTaskAC","CustomInput","onChangeText","onKeyPress","onEnter","error","spanClassName","key","style","color","CustomEditSpan","autoFocus","onBlur","spanProps","editMode","setEditMode","children","onDoubleClick","restSpanProps","TaskBlock","taskValue","setTaskValue","mapTasks","tasks","map","taskElem","id","defaultChecked","isDone","callBack","idTask","taskId","updateTaskAC","text","title","undefined","deleteTaskAC","ButtonsBlock","filterHandler","filter","ToDo","task","state","createMode","lastItem","useDispatch","onCheckHandler","checkTaskAC","setFilter","updateTodoMode","setUpdateTodoMode","todoName","setTodoName","console","log","titleName","activeTasks","length","completedTasks","ToDos","useSelector","stateTaskBlock","setCreateMode","todos","index","arr","onMouseUp","onMouseDown","createNewTodoAC","App","Boolean","window","location","hostname","match","store","rootReducer","combineReducers","action","todoId","v1","newTask","trim","copyState","el","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.47ef3eeb.chunk.js","sourcesContent":["import {StateType, Task1Type, taskTitle} from \"../Types\";\r\nimport {v1} from 'uuid'\r\n\r\n\r\nconst initialState: StateType = {\r\n    tasksTitle: [] as Array<taskTitle>,\r\n\r\n    taskBody: {\r\n        // [taskIdWhat]: {\r\n        //     activeTasks: [] as Array<Task1Type>,\r\n        //     completedTasks: [] as Array<Task1Type>\r\n        // },\r\n        // [taskIdWho]: {\r\n        //     activeTasks: [] as Array<Task1Type>,\r\n        //     completedTasks: [] as Array<Task1Type>\r\n        // }\r\n    },\r\n}\r\n\r\nexport let taskBlockReducer = (state: StateType = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks:\r\n                            state.taskBody[action.idTitle].activeTasks.map(\r\n                                (task: Task1Type) => task.id === action.taskId\r\n                                    ? {id: task.id, title: action.taskValue, isDone: task.isDone}\r\n                                    : task),\r\n                        completedTasks:\r\n                            state.taskBody[action.idTitle].completedTasks.map(\r\n                                (task: Task1Type) => task.id === action.taskId\r\n                                    ? {id: task.id, title: action.taskValue, isDone: task.isDone}\r\n                                    : task)\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        case 'REMOVE-TODO':\r\n            delete state.taskBody[action.idTitle]\r\n            return {\r\n                ...state,\r\n                tasksTitle: state.tasksTitle.filter((title: taskTitle) => title.id != action.idTitle),\r\n            }\r\n\r\n        case 'UPDATE-TODO-NAME':\r\n            debugger\r\n            return {\r\n                ...state,\r\n                tasksTitle: [...state.tasksTitle.map((title: taskTitle) =>\r\n                    title.id !== action.idTitle ?\r\n                        title\r\n                        : {id: action.idTitle, titleName: action.titleName})\r\n                ],\r\n                taskBody: {...state.taskBody}\r\n            }\r\n\r\n        case 'CREATE-NEW-TODO':\r\n            let todoId = v1()\r\n            return {\r\n                ...state,\r\n                tasksTitle: [...state.tasksTitle, {id: todoId, titleName: action.todoName}],\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [todoId]: {\r\n                        activeTasks: [],\r\n                        completedTasks: []\r\n                    }\r\n                }\r\n            }\r\n\r\n        case 'ADD-TASK':\r\n\r\n            let newTask = {\r\n                id: v1(),\r\n                title: action.inputText.trim(),\r\n                isDone: false\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                tasksTitle: state.tasksTitle,\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks: [...state.taskBody[action.idTitle].activeTasks, newTask],\r\n                        completedTasks: [...state.taskBody[action.idTitle].completedTasks]\r\n                    }\r\n                },\r\n                //ты должен страдать от вложенности!!!\r\n\r\n            };\r\n\r\n\r\n        case 'CHECK-TASK':\r\n\r\n            let copyState: StateType = {\r\n                ...state,\r\n                tasksTitle: state.tasksTitle,\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks: [\r\n                            ...state.taskBody[action.idTitle].activeTasks.map(task =>\r\n\r\n                                task.id === action.id ?\r\n                                    task.isDone ?\r\n                                        {task, isDone: false} : {...task, isDone: true} : task)\r\n                        ],\r\n                        completedTasks: [\r\n                            ...state.taskBody[action.idTitle].completedTasks.map(task =>\r\n\r\n                                task.id === action.id ?\r\n                                    task.isDone ?\r\n                                        {...task, isDone: false} : {...task, isDone: true} : task)\r\n                        ]\r\n                    }\r\n                }\r\n                ,\r\n            };\r\n\r\n            return {\r\n                ...copyState,\r\n                tasksTitle: copyState.tasksTitle,\r\n                taskBody: {\r\n                    ...copyState.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks: [\r\n                            ...copyState.taskBody[action.idTitle].activeTasks.filter((el: Task1Type) => !el.isDone),\r\n                            ...copyState.taskBody[action.idTitle].completedTasks.filter((el: Task1Type) => !el.isDone)\r\n                        ],\r\n                        completedTasks: [\r\n                            ...copyState.taskBody[action.idTitle].completedTasks.filter((el: Task1Type) => el.isDone),\r\n                            ...copyState.taskBody[action.idTitle].activeTasks.filter((el: Task1Type) => el.isDone)\r\n                        ]\r\n                        //страдааай!!!\r\n                    }\r\n                },\r\n            };\r\n\r\n        case 'DELETE-TASK':\r\n\r\n            return {\r\n                ...state,\r\n                taskBody: {\r\n                    ...state.taskBody,\r\n                    [action.idTitle]: {\r\n                        activeTasks: [...state.taskBody[action.idTitle].activeTasks.filter(task => task.id !== action.id)],\r\n                        completedTasks: [...state.taskBody[action.idTitle].completedTasks.filter(task => task.id !== action.id)]\r\n                    }\r\n                    //не так уж и страшно впринципе\r\n                },\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\ntype updateTaskACType={type:typeof UPDATE_TASK, idTitle: string, taskId: string, taskValue: string }\r\nconst UPDATE_TASK = 'UPDATE-TASK'\r\nexport const updateTaskAC = (idTitle: string, taskId: string, taskValue: string):updateTaskACType => ({\r\n    type: UPDATE_TASK,\r\n    idTitle,\r\n    taskId,\r\n    taskValue\r\n})\r\n\r\n\r\ntype removeTodoACType = { type: typeof REMOVE_TODO, idTitle: string }\r\nconst REMOVE_TODO = 'REMOVE-TODO'\r\nexport const removeTodoAC = (idTitle: string): removeTodoACType => ({type: REMOVE_TODO, idTitle})\r\n\r\n\r\ntype updateTodoNameACType = { type: typeof UPDATE_TODO_NAME, titleName: string, idTitle: string }\r\nconst UPDATE_TODO_NAME = 'UPDATE-TODO-NAME'\r\nexport const updateTodoNameAC = (titleName: string, idTitle: string): updateTodoNameACType =>\r\n    ({type: UPDATE_TODO_NAME, idTitle, titleName})\r\n\r\n\r\ntype createNewTodoACType = { type: typeof CREATE_NEW_TODO, todoName: string }\r\nconst CREATE_NEW_TODO = 'CREATE-NEW-TODO'\r\nexport const createNewTodoAC = (todoName: string): createNewTodoACType => ({type: CREATE_NEW_TODO, todoName})\r\n\r\n\r\ntype deleteTaskACType = { type: typeof DELETE_TASK, id: string, idTitle: string }\r\nconst DELETE_TASK = 'DELETE-TASK'\r\nexport const deleteTaskAC = (id: string, idTitle: string): deleteTaskACType => ({type: DELETE_TASK, id, idTitle})\r\n\r\n\r\ntype  addTaskACType = { type: typeof ADD_TASK, idTitle: string, inputText: string }\r\nconst ADD_TASK = 'ADD-TASK'\r\nexport const addTaskAC = (idTitle: string, inputText: string): addTaskACType => ({\r\n    type: ADD_TASK,\r\n    idTitle,\r\n    inputText\r\n})\r\n\r\n\r\nexport type checkTaskACType = { type: typeof CHECK_TASK, id: string, idTitle: string }\r\nconst CHECK_TASK = 'CHECK-TASK'\r\nexport const checkTaskAC = (id: string, idTitle: string): checkTaskACType => ({type: CHECK_TASK, id, idTitle})\r\n\r\n\r\n\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps, FC} from \"react\";\r\n\r\ntype DefaultButtonsPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\ntype CustomButtonPropsType = DefaultButtonsPropsType & {\r\n\r\n\r\n    red?:boolean\r\n}\r\nexport const CustomButton: FC<CustomButtonPropsType> = (\r\n    {\r\n         className,red, ...restProps\r\n    }) => {\r\n\r\n   const finalClassName= `${red && red} ${className}`\r\n\r\n    return (\r\n        <button className={finalClassName}\r\n                {...restProps}/>\r\n    )\r\n\r\n}","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {InputPropsType} from \"./Types\";\r\nimport {addTaskAC} from \"./Redux/ToDoReducer\";\r\nimport {CustomButton} from \"./CustomButton\";\r\n\r\n\r\nexport const InputBlock = (props: InputPropsType) => {\r\n\r\n    const [inputText, setInputText]= useState<string>('')\r\n    const [errorInput, setErrorInput]=useState<boolean>(false)\r\n\r\n    const addTask = () => {\r\n        if ((/^\\s+$/).test(inputText) || inputText === '') {\r\n            setErrorInput(true)\r\n            return\r\n        }\r\n      props.dispatch(addTaskAC(props.idTitle,inputText))\r\n        setInputText('')\r\n    }\r\n\r\n    const ChangeTextTaskTitle = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputText(e.currentTarget.value)\r\n    }\r\n\r\n    const onclickHandler = () => {\r\n        setInputText('')\r\n        setErrorInput(false)\r\n    }\r\n\r\n    return (\r\n        <div className={errorInput?'error':'notError'}>\r\n            <input onChange={ChangeTextTaskTitle} value={inputText}\r\n            onClick={onclickHandler}/>\r\n            <CustomButton onClick={addTask}>add</CustomButton>\r\n\r\n            {errorInput&&<div >field is empty</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype CustomInputPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\nexport const CustomInput: React.FC<CustomInputPropsType> = (\r\n    {\r\n        type, onChange, onChangeText, onKeyPress, onEnter,\r\n        error, className, spanClassName, ...restProps\r\n    }\r\n) => {\r\n\r\n    const onChangeCallBack = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressCallBack = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e)\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <input type=\"text\" onChange={onChangeCallBack} onKeyPress={onKeyPressCallBack}\r\n                   {...restProps}/>\r\n            {error && <div style={{color: 'red'}}>{error}</div>}\r\n        </>\r\n    )\r\n}","import React, {DetailedHTMLProps, HTMLAttributes, InputHTMLAttributes, useState} from \"react\";\r\nimport {CustomInput} from \"./CustomInput\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\r\ntype CustomEditSpanPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    spanProps?: DefaultSpanPropsType\r\n}\r\nexport const CustomEditSpan: React.FC<CustomEditSpanPropsType> = (\r\n    {\r\n        autoFocus, onBlur, onEnter,\r\n        spanProps,onChangeText, ...restProps\r\n    }) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const {children, onDoubleClick, className, ...restSpanProps} = spanProps || {}\r\n\r\n    const onEnterCallBack = () => {\r\n        setEditMode(false)\r\n        onEnter && onEnter()\r\n    }\r\n\r\n    const onBlurCallBack = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setEditMode(false)\r\n\r\n        onBlur && onBlur(e)\r\n    }\r\n\r\n    const onDoubleClickCallBack = (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\r\n        setEditMode(true)\r\n        onDoubleClick && onDoubleClick(e)\r\n    }\r\n    const finalClassName = `${className}`\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                    ? <CustomInput\r\n\r\n                        autoFocus\r\n                        onBlur={onBlurCallBack}\r\n                        onEnter={onEnterCallBack}\r\n                        onChangeText={onChangeText}\r\n                        {...restProps}/>\r\n\r\n                    : <span onDoubleClick={onDoubleClickCallBack}\r\n                            className={finalClassName}\r\n                            {...restSpanProps}>\r\n                        {  children|| restProps.value}\r\n                    </span>\r\n\r\n            }\r\n        </>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport {Task1Type, TaskBlockType} from \"./Types\";\r\n\r\nimport {deleteTaskAC, updateTaskAC} from \"./Redux/ToDoReducer\";\r\nimport {CustomInput} from \"./CustomInput\";\r\nimport {CustomButton} from \"./CustomButton\";\r\nimport {CustomEditSpan} from \"./CustomEditSpan\";\r\n\r\n\r\nexport const TaskBlock = (props: TaskBlockType) => {\r\n    const [taskValue, setTaskValue] = useState<string>('')\r\n\r\n\r\n    const updateTask = (idTask: string, idTitle: string) => {\r\n\r\n        props.dispatch(updateTaskAC(idTitle, idTask, taskValue))\r\n\r\n    }\r\n\r\n\r\n    const checkTask = (id: string, idTitle: string) => {\r\n        props.callBack(id, idTitle)\r\n    }\r\n\r\n    const deleteTask = (id: string, idTitle: string) => {\r\n        props.dispatch(deleteTaskAC(id, idTitle))\r\n    }\r\n\r\n    const mapTasks = props.tasks.map((taskElem: Task1Type) => {\r\n\r\n\r\n\r\n            return (\r\n                <li key={taskElem.id}>\r\n\r\n                    <input type='checkbox'\r\n                           defaultChecked={taskElem.isDone}\r\n                           onClick={() => {\r\n                               checkTask(taskElem.id, props.idTitle)\r\n                           }}\r\n                    />\r\n\r\n                    <CustomEditSpan value={taskValue}\r\n                                    onBlur={() => {\r\n                                        updateTask(taskElem.id, props.idTitle)\r\n                                        setTaskValue('')\r\n                                    }}\r\n                                    onChangeText={(text) => {\r\n                                        setTaskValue(text)\r\n                                    }}\r\n                                    spanProps={{children:!taskElem.title? undefined : taskElem.title}}/>\r\n                    <CustomButton onClick={() => {\r\n                        deleteTask(taskElem.id, props.idTitle)\r\n                    }}>\r\n                        remove task\r\n                    </CustomButton>\r\n                </li>\r\n            )\r\n        }\r\n    )\r\n\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {mapTasks}\r\n                </ul>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n","import React from \"react\";\r\nimport './App.css';\r\nimport {CustomButton} from \"./CustomButton\";\r\n\r\n\r\ntype ButtonsBlockType= {\r\n    filterHandler:(filter:string)=>void\r\n    filter:string\r\n}\r\n\r\nexport const ButtonsBlock:React.FC<ButtonsBlockType> = ({filterHandler,filter}) => {\r\n\r\n\r\n    const onClickHandler = (filter:string) => {\r\n        filterHandler(filter)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*<CustomButton onClickHandler={onClickHandler}*/}\r\n            {/*              className={filter==='All'?'activeButton':''}*/}\r\n            {/*              buttonName={'All'}  />*/}\r\n            {/*<CustomButton onClickHandler={onClickHandler}*/}\r\n            {/*              className={filter==='Active'?'activeButton':''}*/}\r\n            {/*              buttonName={'Active'}  />*/}\r\n            {/*<CustomButton onClickHandler={onClickHandler}*/}\r\n            {/*              className={filter==='Completed'?'activeButton':''}*/}\r\n            {/*              buttonName={'Completed'}  />*/}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {StateType, taskTitle} from \"./Types\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {checkTaskAC, removeTodoAC, updateTodoNameAC} from \"./Redux/ToDoReducer\";\r\nimport {InputBlock} from \"./InputBlock\";\r\nimport {TaskBlock} from \"./TaskBlock\";\r\nimport {ButtonsBlock} from \"./ButtonsBlock\";\r\nimport {CustomInput} from \"./CustomInput\";\r\nimport {CustomButton} from \"./CustomButton\";\r\n\r\ntype ToDoType = {\r\n    task: taskTitle\r\n    state: StateType\r\n    createMode: boolean\r\n    lastItem: number\r\n}\r\nexport const ToDo: React.FC<ToDoType> = ({task, state, createMode, lastItem}) => {\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const onCheckHandler = (id: string, idTitle: string) => dispatch(checkTaskAC(id, idTitle))\r\n\r\n    const [filter, setFilter] = useState<string>('All')\r\n    const [updateTodoMode, setUpdateTodoMode] = useState<boolean>(false)\r\n    const [todoName, setTodoName] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const todoNameChanger = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setTodoName(e.currentTarget.value)\r\n    }\r\n\r\n    const useSetFilterHandler = (filter: string) => setFilter(filter)\r\n\r\n    const onUpdateTodoMode = () => setUpdateTodoMode(true)\r\n\r\n    const updateTodoName = () => {\r\n\r\n        dispatch(updateTodoNameAC(todoName ? todoName : 'no name', task.id))\r\n        setUpdateTodoMode(false)\r\n    }\r\n\r\n    const removeTodo = () => {\r\n        dispatch(removeTodoAC(task.id))\r\n    }\r\n    console.log(lastItem)\r\n    return (\r\n        <div key={task.id} className={lastItem === 1 && !createMode ? 'todo-mapped-created' : 'todo-mapped'}>\r\n            {\r\n                !updateTodoMode\r\n                    ? <h3 onClick={onUpdateTodoMode}>{task.titleName}</h3>\r\n                    : <CustomInput onChange={todoNameChanger} onEnter={updateTodoName}\r\n                                   value={todoName} error={error}/>\r\n\r\n            }\r\n\r\n\r\n            <InputBlock dispatch={dispatch} state={state} idTitle={task.id}/>\r\n\r\n            {\r\n                state.taskBody[task.id].activeTasks.length === 0\r\n                && state.taskBody[task.id].completedTasks.length === 0\r\n                && <div>no active and completed tasks</div>\r\n            }\r\n\r\n            <div>\r\n                {\r\n                    filter === 'Completed' || 'All'\r\n                    && <TaskBlock idTitle={task.id} tasks={state.taskBody[task.id].activeTasks}\r\n                                  callBack={onCheckHandler} dispatch={dispatch}/>\r\n                }\r\n            </div>\r\n\r\n            <div className={'CompletedTasks'}>\r\n                {\r\n                    filter === 'Active' || 'All'\r\n                    && <TaskBlock idTitle={task.id} tasks={state.taskBody[task.id].completedTasks}\r\n                                  callBack={onCheckHandler} dispatch={dispatch}/>\r\n                }\r\n            </div>\r\n            <div>\r\n                <CustomButton className={filter === 'All' ? 'activeButton' : ''}\r\n                              onClick={() => {\r\n                                  setFilter('all')\r\n                              }}>all </CustomButton>\r\n\r\n                <CustomButton className={filter === 'Active' ? 'activeButton' : ''}\r\n                              onClick={() => {\r\n                                  setFilter('Active')\r\n                              }}>Active </CustomButton>\r\n\r\n                <CustomButton className={filter === 'Completed' ? 'activeButton' : ''}\r\n                              onClick={() => {\r\n                                  setFilter('Completed')\r\n                              }}>Completed </CustomButton>\r\n\r\n                <CustomButton onClick={() => {\r\n                    removeTodo()\r\n                }}>remove todo </CustomButton>\r\n            </div>\r\n            <ButtonsBlock filterHandler={useSetFilterHandler} filter={filter}/>\r\n\r\n        </div>)\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {taskTitle} from \"./Types\";\r\nimport {ToDo} from \"./ToDo\";\r\nimport {createNewTodoAC} from \"./Redux/ToDoReducer\";\r\nimport {CustomInput} from \"./CustomInput\";\r\nimport {CustomEditSpan} from \"./CustomEditSpan\";\r\nimport {CustomButton} from \"./CustomButton\";\r\n\r\n\r\nexport const ToDos = () => {\r\n\r\n    let state = useSelector((state: any) => state.stateTaskBlock)\r\n    let dispatch = useDispatch()\r\n    let [todoName, setTodoName] = useState<string>('')\r\n    const [createMode, setCreateMode] = useState<boolean>(false)\r\n\r\n    const createTask = () => {\r\n        if (!todoName && createMode) {\r\n            return\r\n        }\r\n        dispatch(createNewTodoAC(todoName ? todoName : 'no name task'))\r\n        setTodoName('')\r\n        setCreateMode(false)\r\n\r\n\r\n    }\r\n    const onDoubleClickHandler = () => setTodoName('')\r\n\r\n\r\n    const moveCreateTask = () => {\r\n        setTodoName('')\r\n        setCreateMode(true)\r\n    }\r\n\r\n\r\n    const todos = state.tasksTitle.map((task: taskTitle, index: number, arr: Array<taskTitle>) => <ToDo\r\n        lastItem={arr.length - index} createMode={createMode} key={task.id} task={task} state={state}/>)\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <CustomEditSpan value={todoName} onChangeText={setTodoName}\r\n                            className={'new-todo-input'}\r\n                            onBlur={() => {\r\n                                setTodoName('')\r\n                            }}\r\n                            onDoubleClick={onDoubleClickHandler}\r\n                            spanProps={{children: todoName ? undefined : ' Create new task'}}/>\r\n\r\n            <CustomButton onMouseUp={moveCreateTask}\r\n                          onMouseDown={createTask}\r\n            >Create</CustomButton>\r\n\r\n            <div>{todos}</div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {ToDos} from \"./Todos\";\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n            <ToDos />\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/ReduxStore\";\r\n\r\n\r\n\r\nconst rerenderApp=(store:any)=>{\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n\r\n        , document.getElementById('root'));\r\n}\r\n\r\nrerenderApp(store)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {taskBlockReducer} from \"./ToDoReducer\";\r\n\r\n\r\nlet rootReducer= combineReducers({\r\n    stateTaskBlock:taskBlockReducer\r\n})\r\n\r\nexport let store= createStore(rootReducer)"],"sourceRoot":""}